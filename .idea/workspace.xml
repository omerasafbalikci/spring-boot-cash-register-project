<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="4d6e52b4-0d65-4c7c-b617-aca701f9252f" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/README.md" beforeDir="false" afterPath="$PROJECT_DIR$/README.md" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2jRfHtBzTfKNLROml0zAf4ybAiQ" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Application.ApigatewayApplication.executor&quot;: &quot;Run&quot;,
    &quot;Application.AuthenticationauthorizationserviceApplication.executor&quot;: &quot;Run&quot;,
    &quot;Application.DiscoveryserverApplication.executor&quot;: &quot;Run&quot;,
    &quot;Application.ProductserviceApplication.executor&quot;: &quot;Run&quot;,
    &quot;Application.ReportserviceApplication.executor&quot;: &quot;Run&quot;,
    &quot;Application.SalesserviceApplication.executor&quot;: &quot;Run&quot;,
    &quot;Application.UsermanagementserviceApplication.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CampaignBusinessRulesTest.checkCampaignDetails_whenBuyPayEntryIsIncorrect_shouldThrowException.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CampaignBusinessRulesTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CampaignControllerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CampaignManagerTest.deleteAllCampaigns_shouldThrowCampaignNotFoundException.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.CampaignManagerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.GlobalExceptionHandlerTest (1).executor&quot;: &quot;Run&quot;,
    &quot;JUnit.GlobalExceptionHandlerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.JwtAuthenticationFilterTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.JwtManagerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.MailManagerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.PaginationResponseTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryControllerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryControllerTest.getProductCategoriesFiltered.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryControllerTest.getProductsByCategoryId.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.addCategory_shouldAddNewCategory_whenCategoryDoesNotExist.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.addCategory_shouldThrowException_whenCategoryExists.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.deleteCategory_categoryNotFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.deleteCategory_success.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.getCategoriesFiltered_asc.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.getProductFiltered_asc.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.getProductsByCategoryId_noProductCategoryFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.getProductsByCategoryId_returnsProducts.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.testGetCategoriesFiltered.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.testGetProductsByCategoryId_CategoryExists.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.updateCategory_shouldThrowException_whenCategoryDoesNotExist.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.updateCategory_shouldThrowException_whenCategoryNameAlreadyExists.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductCategoryManagerTest.updateCategory_shouldUpdateCategory_whenCategoryExistsAndNameIsUnique.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductControllerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductControllerTest.getProductsFiltered.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.addProduct_existingProductDifferentPrice.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.addProduct_existingProductSamePrice.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.addProduct_newProduct.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.addProduct_productCategoryNotFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.checkProductInInventory_insufficientQuantity.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.checkProductInInventory_productNotFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.checkProductInInventory_sufficientQuantity.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.deleteProduct_notFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.deleteProduct_success.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.getProductFiltered_asc.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.getProductFiltered_desc.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.updateProductInInventory_productFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.updateProductInInventory_productNotFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.updateProduct_nameAlreadyExists.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.updateProduct_notFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ProductManagerTest.updateProduct_success.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.RoleTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.SalesBusinessRulesTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.SalesControllerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.SalesManagerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.SalesManagerTest.testDeleteSales_SalesNotFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.SalesManagerTest.testDeleteSales_Success.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.TokenRepositoryTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserControllerTest (1).executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserControllerTest.deleteUsername.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserControllerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserControllerTest.restoreUser.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserManagerTest (1).executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserManagerTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserManagerTest.restoreUser_success.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserManagerTest.restoreUser_unexpectedFail.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserManagerTest.restoreUser_userNotFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserManagerTest.restoreUsername_success.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UserManagerTest.restoreUsername_userNotFound.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.UsermanagementserviceApplicationTests.executor&quot;: &quot;Run&quot;,
    &quot;Maven.toyota-project [clean].executor&quot;: &quot;Run&quot;,
    &quot;Maven.toyota-project [install].executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/omera/Desktop/springboot-microservices-market-checkout&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;inlay.hints&quot;
  }
}</component>
  <component name="RunManager" selected="Application.ReportserviceApplication">
    <configuration name="AuthenticationauthorizationserviceApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.toyota.authenticationauthorizationservice.AuthenticationauthorizationserviceApplication" />
      <module name="authenticationauthorizationservice" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.toyota.authenticationauthorizationservice.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ProductserviceApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.toyota.productservice.ProductserviceApplication" />
      <module name="productservice" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.toyota.productservice.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ReportserviceApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.toyota.reportservice.ReportserviceApplication" />
      <module name="reportservice" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.toyota.reportservice.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SalesserviceApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.toyota.salesservice.SalesserviceApplication" />
      <module name="salesservice" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.toyota.salesservice.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="UsermanagementserviceApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="com.toyota.usermanagementservice.UsermanagementserviceApplication" />
      <module name="usermanagementservice" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="com.toyota.usermanagementservice.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="JetRunConfigurationType">
      <module name="springboot-microservices-safe" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
      <module name="springboot-microservices-safe" />
      <option name="filePath" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.ReportserviceApplication" />
        <item itemvalue="Application.SalesserviceApplication" />
        <item itemvalue="Application.ProductserviceApplication" />
        <item itemvalue="Application.UsermanagementserviceApplication" />
        <item itemvalue="Application.AuthenticationauthorizationserviceApplication" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4d6e52b4-0d65-4c7c-b617-aca701f9252f" name="Changes" comment="" />
      <created>1721354726081</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1721354726081</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/springboot_microservices_market_checkout$ProductCategoryManagerTest.ic" NAME="ProductCategoryManagerTest Coverage Results" MODIFIED="1721692292479" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="true">
      <FILTER>com.toyota.productservice.service.concretes.*</FILTER>
    </SUITE>
  </component>
</project>